<?xml version="1.0" encoding="utf-8"?>
<KFunction xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Name>wsGetMPIinfo</Name>
  <ID>WS.wsGetMPIinfo</ID>
  <Category>WS</Category>
  <FunctionLevel>Project</FunctionLevel>
  <FunctionType>WebService</FunctionType>
  <RegisterAsLuDbFunction>false</RegisterAsLuDbFunction>
  <SaveToDLUR>false</SaveToDLUR>
  <ApiFunction>false</ApiFunction>
  <DecisionFunction>false</DecisionFunction>
  <RequiresLuReference>false</RequiresLuReference>
  <Desc />
  <Auther name="" id="" />
  <Language>Java</Language>
  <FunctionBody>if(MPI == null || MPI.isEmpty()){
	return null;
}
Random random = new Random();
Object[] valuesArr = null;

Map&lt;String,Object&gt; overallMap = new LinkedHashMap&lt;String,Object&gt;();

Map&lt;String,String&gt; monthsMap = new HashMap&lt;String,String&gt;() {{
    put("01", "January");
    put("02", "February");
	put("03", "March");
	put("04", "April");
	put("05", "May");
	put("06", "June");
	put("07", "July");
	put("08", "August");
	put("09", "September");
	put("10", "October");
	put("11", "November");
	put("12", "December");
}};

DBExecute("fabric","get AT_MPI."+ MPI, null);

// *************** INVOICE STATUS PIE CHART ***************
String statusInfoSQL = "SELECT STATUS ,COUNT(*) FROM INVOICE Group By STATUS";
ResultSetWrapper statusInfoRes = DBQuery("fabric", statusInfoSQL, valuesArr);

ArrayList&lt;Object&gt; statusMap = new ArrayList&lt;Object&gt;();


overallMap.put("MPISearchedFor",MPI);

for(Object[] row : statusInfoRes) {
	Object[] myArray = new Object[2];
	myArray[0] = row[0];    
	myArray[1] = random.nextInt(100 - Integer.parseInt(row[1].toString()) + 1) + Integer.parseInt(row[1].toString());
	
	statusMap.add(myArray);
}


// *************** VISISTS PER MONTH PIE CHART/GRAPH ***************
Object[] visitsPerMonth = new Object[12];
ArrayList&lt;Object&gt; visitsMap = new ArrayList&lt;Object&gt;();
ArrayList&lt;Object&gt; visitsPerMonthMap = new ArrayList&lt;Object&gt;();

String visitsInfoSQL = "SELECT strftime('%m', VISIT_DATE), COUNT(*) FROM VISIT Group By strftime('%m', VISIT_DATE)";
ResultSetWrapper visitsInfoRes = DBQuery("fabric", visitsInfoSQL, valuesArr);

Map&lt;String, Object&gt; tempMap = new LinkedHashMap&lt;String, Object&gt;();
for(Object[] row : visitsInfoRes) {
	tempMap.put(row[0].toString(),row[1]);
	
}
int i=0;
for(String month: monthsMap.keySet()){
	
	Object[] myArray = new Object[2];
	myArray[0] = monthsMap.get(month);
	if(tempMap.get(month) == null){
		myArray[1] = random.nextInt(23);
	}else{  
		myArray[1] =  random.nextInt(22 - Integer.parseInt(tempMap.get(month).toString()) + 1) + Integer.parseInt(tempMap.get(month).toString());
	}
	
	visitsPerMonth[i] = myArray[1];
	
	visitsMap.add(myArray);
	i++;
}
visitsPerMonthMap.add(visitsPerMonth);

// *************** INVOICE BALANCE ***************
ArrayList&lt;Object&gt; invoiceBalancehMap = new ArrayList&lt;Object&gt;();
String balanceInfoSQL = "SELECT BALANCE FROM INVOICE";
ResultSetWrapper balanceInfoRes = DBQuery("fabric", balanceInfoSQL, valuesArr);
for(Object[] row : balanceInfoRes) {   
	invoiceBalancehMap.add(random.nextInt(50000 - (int)Double.parseDouble(row[0].toString()) + 1) + (int)Double.parseDouble(row[0].toString()));
}
overallMap.put("results_status",statusMap);
overallMap.put("results_visits",visitsMap);
overallMap.put("results_visits_graph",visitsPerMonthMap);
overallMap.put("results_balance",invoiceBalancehMap);


return overallMap;
</FunctionBody>
  <IsSyntaxValid>true</IsSyntaxValid>
  <IsRootFunction>false</IsRootFunction>
  <InputParams>
    <Input name="MPI" id="fi.WS.wsGetMPIinfo.0" index="0" dataType="String">
      <Comment />
    </Input>
  </InputParams>
  <OutputParams>
    <Output name="rs" id="fo.WS.wsGetMPIinfo.0" index="0" dataType="Object">
      <Comment />
    </Output>
  </OutputParams>
</KFunction>